name: Test and Packer Validation

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Python packages
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          host port: 3306 # Optional, default value is 3306. The port of host
          container port: 3306 # Optional, default value is 3306. The port of container
          character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
          collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
          mysql version: '8.0' # Optional, default value is "latest". The version of the MySQL
          mysql root password: ${{ secrets.DB_ROOT_PASSWORD }} # Required if "mysql user" is empty, default is empty. The root superuser password

      - name: Start MySQL Service
        run: sudo systemctl start mysql

      - name: Check MySQL Service Status
        run: sudo systemctl status mysql

      - name: Set up MySQL
        run: |
          mysql -u root -p"${{ secrets.DB_ROOT_PASSWORD }}" <<EOF
          CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_NAME }};
          CREATE USER IF NOT EXISTS '${{ secrets.DB_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.DB_USER_TEST_PASSWORD }}';
          GRANT ALL PRIVILEGES ON *.* TO '${{ secrets.DB_USER }}'@'localhost';
          FLUSH PRIVILEGES;
          EOF

      - name: Create log directory
        run: |
          sudo mkdir -p /var/log/myapp
          sudo chmod 777 /var/log/myapp

      - name: Run Django Migrations
        run: |
          python manage.py makemigrations
          python manage.py migrate

      - name: Run tests
        run: python manage.py test

  packer_validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Zip creation
        run: |
          mkdir -p app_artifact
          mkdir -p requirements
          cp packer/scripts/requirements.txt requirements || exit 1
          zip -r webapp.zip . -x ".git/*" ".github/*" || exit 1
          mv webapp.zip app_artifact || exit 1

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Format Packer template
        run: |
          cd packer
          output=$(packer fmt -check .)
          if [ -n "$output" ]; then
            echo "$output"
            exit 1
          fi

      - name: Validate Packer
        run: |
          cd packer
          packer init webapp.pkr.hcl
          packer validate -var='gcp_project_id=${{ secrets.GCP_PROJECT_ID }}' -var='mysql_user_password=${{ secrets.DB_USER_PASSWORD }}' -var='mysql_root_password=${{ secrets.DB_ROOT_PASSWORD }}' webapp.pkr.hcl
